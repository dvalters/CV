<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
    <meta name="Description" content="Declan Valters">
    <meta name="author" content="Declan Valters">
    <meta name="Copyright" content="Copyright (c) 2014">
	<title>Notes on HPC for Landscape Dynamics Modelling</title>
	<style type="text/css" media="screen">
		html, body, div, header, footer, aside, nav, article, section	{ margin: 0; padding: 0; }
		header, footer, aside, nav, article, section	{ display: block; }
		body 			{ color: #333; font: 12px Helvetica, Arial, sans-serif; line-height: 18px; }
		h2				{ color: #333; }
		a				{ color: #337810; }
		p				{ margin: 0 0 18px; }
		#container		{ width: 760px; margin: 0 auto; }
		
		/* Header */
		header			{ background: #333; border-bottom: 2px solid #aaa; }
		header h1  	{ color: #fff; margin: 0 0 3px; padding: 24px 18px 0; }
		header p		{ color: #ccc; font-size: 11px; font-weight: bold; padding: 0 18px; }
		
		/* Content Style */
		nav		{ margin-left: 18px; }
		nav ul	{ padding: 0 18px 9px; }
		#extra			{ margin: 0 18px; }
		#extra small	{ font-size: 11px; line-height: 18px; }
		#content		{ border-bottom: 1px solid #ccc; margin: 0 18px; }
		#content p, #extra p { padding-right: 18px; }
		
		/* Content Positioning and Size */
		nav		{ float: right; width: 350px; }
		#content		{  }
		#extra			{ float: left; width: 350px; }		/* Footer */
		footer			{ background: #666; border-bottom: 2px solid #aaa; clear: both; }
		footer a		{ color: #fff; }
		footer	p		{ color: #ccc; margin: 0; padding: 0 18px 10px; }
		footer ul		{ border-bottom: 1px solid #999; list-style: none; margin: 0 18px 6px; padding: 10px 0 6px; }
		footer li		{ display: inline; font-size: 11px; font-weight: bold; padding-right: 5px; }
	</style>
	<!--[if IE]>
	<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
</head>
<body>
	<div id="container">
		<header>
			<h1>Notes on HPC and Parallel Programming</h1>
			<p>Some notes on using HPC (High Performance Computing)<br>
			Applications for landscape and atmospheric modelling<br>
			Declan Valters, University of Manchester, United Kingdom</p>
			
		</header>
		<div id="wrapper">
			<section id="content">
				<h2>Desktop Computing: Making use of multiple cores</h2>
				<h3>Many programs, many cores</h3>

				<p>Most modern desktops now have at least dual core processors. These are designed to increase computing power by running different parts of your code through separate computing cores on the CPU. However, unless the code is specifically written to make use of multi-core processors, it will run in serial on a single core, regardless of how many cores the CPU has. Obviously this means a lot of the potential computing power is going to waste if you are running computationally demanding code, or multiple small jobs all in serial.</p>

<p>For example, say you are running a sensitivity analysis with a script that calls your program, passing a different set of parameters to the program each time. Unless specified otherwise, the script will simply work through each job in serial, one after the other, on a single core until all the jobs are completed. As each job is independent of each other, the spare core(s) you have are going to waste.</p>

<p>In this case, a simple job-queueing utility such as <a href="http://www.maier-komor.de/xjobs.html">xjobs</a> automatically assigns a job to each core, queueing up all the jobs in a script file. If a CPU is hyper-threaded (such as the Intel 'Core' series) a 4 core CPU will have 8 'threads', effectively functioning as 8 virtual cores to run processes on (albeit not as good as a true 8-core CPU).</p>
			</section>

			<section id="content">
				<h2>Parallel Programming: Coding for multiple cores</h2>
				<h3>One program, many cores</h3>

				<p>In the above example, when each program (job) is running, it is only running on one core at a time. The code of each program is still serial code, we have just set a series of individual programs to run in parallel. But if your code is very expensive computationally, there are techniques to get sections of the code to run across multiple cores in parallel. Parallel programming can be done automatically to some extent by the compiler, or auto-parallelization tools. It can also be done manually by the programmer, through the use of libraries such as OpenMP. It is typically implemented in loops where iterations of the loop can be assigned to different cores, and where each iteration is not dependent on the previous iteration.</p>


			</section>

			<section id="content">
				<h2>Clusters and Supercomputing</h2>
				<h3>Many programs, many CPUs</h3>

				<p></p>


			</section>


		</div>

	
				<p><small></small></p>	
		</section>
		
		<footer>
			<ul>
				<li><a href="http://www.manchester.ac.uk/">University of Manchester</a></li>
				<li><a href="http://www.cas.manchester.ac.uk/resactivities/meteorology/">Meteorology Research Group</a></li>
				<li><a href="http://www.seaes.manchester.ac.uk/our-research/researchgroups/basinstudiesandpetroleumgeoscience/researchthemes/landscapeevolutionandearthsurfaceprocesses/">Earth Surface Research Group</a></li>
			</ul>
			<p>University of Manchester personal webpage</p>
		</footer>
	</div>
</body>
</html>
